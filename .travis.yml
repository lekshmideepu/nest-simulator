
# .travis.yaml

# This file is part of NEST.
#
# Copyright (C) 2004 The NEST Initiative
#
# NEST is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# NEST is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NEST.  If not, see <http://www.gnu.org/licenses/>.

# This is the Travis CI top-level script to setup and run the NEST
# build and test environment.


language: python

sudo: required
dist: focal  #Ubuntu Focal Fossa 20.04

env:
  global:
    - MAKEFLAGS="-j 2"
stages:
   - Static-Code-Analysis
   - Linux-GCC
   - Linux-Clang
   - macOS

jobs:
  # list of build stages to run. Stages with the same name get run in parallel.
  include:
    - stage: Static-Code-Analysis
      python: 3.8.2
      env: CACHE_NAME=JOB xNEST_BUILD_TYPE=STATIC_CODE_ANALYSIS
    - stage: Linux-GCC
      python: 3.8.2
      env: CACHE_NAME=JOB xNEST_BUILD_TYPE=MINIMAL
    - stage: Linux-GCC
      python: 3.8.2
      env: CACHE_NAME=JOB xNEST_BUILD_TYPE=MPI_ONLY
    - stage: Linux-GCC
      python: 3.8.2
      env: CACHE_NAME=JOB xNEST_BUILD_TYPE=OPENMP_ONLY
    - stage: Linux-GCC
      python: 3.8.2
      env: CACHE_NAME=JOB xNEST_BUILD_TYPE=FULL
    - stage: Linux-Clang
      language: cpp
      python: 3.6.10
      env: CACHE_NAME=JOB xNEST_BUILD_TYPE=MINIMAL xNEST_BUILD_COMPILER=CLANG xNEST_PYTHON_VERSION=3.6.10
    - stage: macOS
      os: osx
      osx_image: xcode12.2   # Python 3.9.0 running on macOS 10.15.7
      language: shell      # language 'python' results in errors on macOS
      env: CACHE_NAME=JOB xNEST_BUILD_TYPE=FULL_NO_EXTERNAL_FEATURES
      cache:
        directories:
          - $HOME/.cache
          - $HOME/.pyenv/versions
          - /usr/local/Homebrew
addons:
   apt:
    sources:
     - *BASE_SOURCES
     - ubuntu-toolchain-r-test
    packages:
     - *BASE_PACKAGES
     - gcc-8
     - g++-8
     - clang-7
     - build-essential
     - cmake
     - libltdl-dev
     - libreadline6-dev
     - libncurses5-dev
     - libgsl0-dev
     - python3-all-dev
     - ipython3
     - pkg-config
     - openmpi-bin
     - libopenmpi-dev
     - libpcre3
     - libpcre3-dev
     - llvm-9-dev
     - jq
     - pep8
     - libboost-filesystem-dev
     - libboost-regex-dev
     - libboost-wave-dev
     - libboost-python-dev
     - libboost-program-options-dev
     - libboost-test-dev
cache:
   directory:
     - $HOME/.cache

before_install:
   - export SOURCEDIR=$PWD
   # select the right C++ compiler version (gcc8) -- note that update-alternatives is not available on MacOS
   - |
     if [ "$TRAVIS_OS_NAME" = "linux" ]; then
       ls -lh /usr/bin/g++*
       ls -lh /usr/bin/gcc*
       ls -lh /usr/bin/c++*
       sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 20
       sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 10
       sudo update-alternatives --auto g++
       sudo update-alternatives --list g++
       sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 20
       sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 10
       sudo update-alternatives --auto gcc
       sudo update-alternatives --list gcc
       sudo update-alternatives --list c++
       sudo update-alternatives --auto c++
       g++ --version
       /usr/bin/c++ --version
     fi
   - |
     if [ "$xNEST_BUILD_TYPE" != "STATIC_CODE_ANALYSIS" ]; then
         echo "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +"
         echo "+         P R E P A R E   N E S T   B U I L D   E N V I R O N M E N T         +"
         echo "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +"
         cp extras/install_csa-libneurosim.sh $HOME
         cp extras/install_music.sh $HOME
         cp extras/install_sionlib.sh $HOME
         cp extras/install_libboost.sh $HOME
         cd $HOME/build
         echo $PATH
         if [ "$xNEST_BUILD_COMPILER" = "CLANG" ]; then
             pyenv global $xNEST_PYTHON_VERSION
         fi

         if [ "$TRAVIS_OS_NAME" = "osx" ]; then
           brew --version
           brew update
           brew info python
           export PATH="/usr/local/opt/python/libexec/bin:$PATH"  # To use homebrew's Python
           brew tap brewsci/science
           brew tap brewsci/bio
           brew install coreutils gsl open-mpi automake autoconf libtool
           brew unlink gcc
           brew install gcc@8
           brew link gcc@8
           find /usr/local/Cellar/ -name Python\.h
           find /usr/local/Cellar/ -name \*python\*dylib
         fi
         # Upgrade pip and setuptools
         pip install --upgrade pip setuptools
         # Installing additional packages using pip as they only have
         # outdated versions in the Travis package whitelist.
         # terminaltables is required by parse_travis_log.py to create
         # the build summary.
         pip install scipy junitparser mpi4py
         if [ "$TRAVIS_OS_NAME" != "osx" ]; then
           pip3 install numpy nose
           pip3 install cython matplotlib terminaltables
         else
           # Due to the issue with numpy C-extensions, have to stick to a specific version on OsX
           #https://numpy.org/devdocs/user/troubleshooting-importerror.html
           pip3 install numpy==1.19.3
           pip3 install cython matplotlib terminaltables
           # nose must be installed user-only to avoid permissions conflict for man-pages
           wget https://files.pythonhosted.org/packages/15/d8/dd071918c040f50fa1cf80da16423af51ff8ce4a0f2399b7bf8de45ac3d9/nose-1.3.7-py3-none-any.whl
           pip3 install --user nose-1.3.7-py3-none-any.whl
         fi  
         pip list
     fi

install:
   - |
     if [ "$xNEST_BUILD_TYPE" != "STATIC_CODE_ANALYSIS" ]; then
         which cython
         cython --version
         which python
         python --version
         which pip
         pip list
         which nosetests
         nosetests --version
         nosetests --plugins
         which cmake
         cmake --version
         echo ${CC}
         echo ${CXX}
     fi

before_script:
   # Change directory back to the NEST source code directory.
   - cd $SOURCEDIR
   - chmod +x extras/travis_build.sh

script:
   - set -o pipefail
   - ./extras/travis_build.sh 2>&1 | tee travis_build.sh.log
   - |
     if [ "$xNEST_BUILD_TYPE" != "STATIC_CODE_ANALYSIS" ]; then
        python extras/parse_travis_log.py travis_build.sh.log "$xNEST_BUILD_TYPE" "$TRAVIS_BUILD_DIR"
     fi

before_deploy:
   - |
     if [ "$xNEST_BUILD_TYPE" != "STATIC_CODE_ANALYSIS" ]; then
         cd $TRAVIS_BUILD_DIR/build
         tar -zcvf reports.tar.gz ./reports
         tar -zcvf docs.tar.gz $TRAVIS_BUILD_DIR/result/share/doc/nest/*.*
         mkdir -p $TRAVIS_BUILD_DIR/build/artefacts_upload
         mv docs.tar.gz $TRAVIS_BUILD_DIR/build/artefacts_upload
         mv reports.tar.gz $TRAVIS_BUILD_DIR/build/artefacts_upload
     fi

# S3 Deployment (Uploading the Travis CI build artefacts to Amazon S3).
#deploy:
#  provider: s3
#  access_key_id:
#    secure: $ARTIFACTS_KEY
#  secret_access_key:
#    secure: $ARTIFACTS_SECRET
#  bucket: "nest-travis-artefacts"
#  region: eu-central-1
#  skip_cleanup: true
#  on:
#    repo: nest/nest-simulator
#    branch: master
#    condition: $xNEST_BUILD_TYPE != STATIC_CODE_ANALYSIS
#  local-dir: "$TRAVIS_BUILD_DIR/build/artefacts_upload"
#  upload-dir: "$TRAVIS_REPO_SLUG/$TRAVIS_BUILD_NUMBER/$TRAVIS_JOB_NUMBER"
#  acl: bucket_owner_full_control
